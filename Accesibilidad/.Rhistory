save.image("~/Jair/GWR_1.RData")
nacional=read.csv("Github/Gob/Tablero_indicadores/Datos/Nacional.csv")
historico=read.csv("Github/Gob/Tablero_indicadores/Datos/Hidalgo_historico.csv")
A=historico[historico$Indicador %in%unique(historico$Indicador)[!unique(historico$Indicador)%in% nacional$Indicador],]
View(A)
View(nacional)
View(nacional)
B=nacional[nacional$Indicador %in% nacional$Indicador[!nacional$Indicador%in% historico$Indicador],]
View(B)
View(historico)
nacional=read.csv("Github/Gob/Tablero_indicadores/Datos/Nacional.csv")
historico=read.csv("Github/Gob/Tablero_indicadores/Datos/Hidalgo_historico.csv")
A=historico[historico$Indicador %in%unique(historico$Indicador)[!unique(historico$Indicador)%in% nacional$Indicador],]
B=nacional[nacional$Indicador %in% nacional$Indicador[!nacional$Indicador%in% historico$Indicador],]
View(B)
View(historico)
View(nacional)
B$Indicador[B$Tema=='Género']
View(B)
C=B[B$Tema!='Género',]
View(C)
nacional=read.csv("Github/Gob/Tablero_indicadores/Datos/Nacional.csv")
historico=read.csv("Github/Gob/Tablero_indicadores/Datos/Hidalgo_historico.csv")
A=historico[historico$Indicador %in%unique(historico$Indicador)[!unique(historico$Indicador)%in% nacional$Indicador],]
B=nacional[nacional$Indicador %in% nacional$Indicador[!nacional$Indicador%in% historico$Indicador],]
datos=as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),ncol=2,nrow = 7,byrow = F))
datos=names(as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),ncol=2,nrow = 7,byrow = F)),c("D","P"))
datos=as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),ncol=2,nrow = 7,byrow = F))|>
setNames(c("Department","Porcentaje"))
View(datos)
mean(datos$Porcentaje)
datos$Porcentaje
mean(as.numeric(datos$Porcentaje))
datos$Porcentaje=as.numeric(datos$Porcentaje)
Adyacencia=matrix(c(0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0),ncol = 7,nrow=7,byrow = T)
View(Adyacencia)
Adyacencia=Adyacencia/rowsum(Adyacencia)
Adyacencia
rowSums(Adyacencia)
Adyacencia=Adyacencia/rowSum(Adyacencia)
Adyacencia=Adyacencia/rowSums(Adyacencia)
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/var(D))*sum(D*W)
}
I_i(1,datos$Porcentaje,Adyacencia[,1])
var(datos$Porcentaje)
View(datos)
datos$Porcentaje
var(datos$Porcentaje)
var(datos$Porcentaje)
I_i(1,datos$Porcentaje,Adyacencia[,1])*var(datos$Porcentaje)/10.46
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/var(D))*sum((D-mean(D))*W)
}
I_i(1,datos$Porcentaje,Adyacencia[,1])
I_i(2,datos$Porcentaje,Adyacencia[,2])
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/10.46)*sum((D-mean(D))*W)
}
I_i(1,datos$Porcentaje,Adyacencia[,1])
I_i(2,datos$Porcentaje,Adyacencia[,2])
((98.92-97.23)/10.46)*((0.25*-0.88)+(0.25*1.10)+(0.25*-1.08)+(0.25*0.03))
datos$Porcentaje-mean(datos$Porcentaje)
*Adyacencia[1,]
Adyacencia[1,]
Adyacencia[,1]
datos$Porcentaje-mean(datos$Porcentaje)*Adyacencia[1,]
(datos$Porcentaje-mean(datos$Porcentaje))*Adyacencia[1,]
sum((datos$Porcentaje-mean(datos$Porcentaje))*Adyacencia[1,])
I_i(1,datos$Porcentaje,Adyacencia[1,])
I_i(2,datos$Porcentaje,Adyacencia[2,])
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/10.46)*sum((D-mean(D))*W)
}
I_i(1,datos$Porcentaje,Adyacencia[1,])
I_i(2,datos$Porcentaje,Adyacencia[2,])
I_todos=function(D,W){
((D-mean(D))/10.46)*rowSums(sum((D-mean(D))*W))
}
I_todos=function(D,W){
return ((D-mean(D))/10.46)*rowSums(sum((D-mean(D))*W))
}
I_todos(datos$Porcentaje,W)
return (((D-mean(D))/10.46)*rowSums(sum((D-mean(D))*W)))
I_todos=function(D,W){
return (((D-mean(D))/10.46)*rowSums(sum((D-mean(D))*W)))
}
I_todos(datos$Porcentaje,W)
I_todos(datos$Porcentaje,Adyacencia)
I_todos=function(D,W){
return (((D-mean(D))/10.46)*rowSums(sum((D-mean(D))*W)))
}
I_todos(datos$Porcentaje,Adyacencia)
I_todos(datos$Porcentaje,Adyacencia)
D=datos$Porcentaje
W=Adyacencia
D-mean(D)
(D-mean(D))*W
rowSums((D-mean(D))*W)
I_todos=function(D,W){
I_todos=function(D,W){
return (((D-mean(D))/10.46)*rowSums((D-mean(D))*W))
}
I_todos(datos$Porcentaje,Adyacencia)
W[1,]
W[1,]*(D-mean(D))
D
(D-mean(D))
W[1,]
W[1,]*(D-mean(D))
(D-mean(D))*W
rowSums(W[1,]*(D-mean(D)))
rowSums(W*(D-mean(D)))
rowSums(W*(D-mean(D)))*(D-mean(D))/10.46
(D-mean(D))/10.46
rowSums(W*(D-mean(D)))*(D-mean(D))/10.46
I_todos=function(D,W){
return rowSums(W*(D-mean(D)))*(D-mean(D))/10.46
I_todos=function(D,W){
return (rowSums(W*(D-mean(D)))*(D-mean(D))/10.46)
}
I_todos(datos$Porcentaje,Adyacencia)
(D-mean(D))/10.46
sum((D-mean(D))/10.46)
(D-mean(D))/10.46
sum((D-mean(D))/10.46)
(D-mean(D))/10.46
I_todos(datos$Porcentaje,Adyacencia)
I_todos=function(D,W){
u=c()
for(i in 1:nrow(D)){
u=append(I_i(i,D,W[i,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
I_todos=function(D,W){
u=c()
for(i in 1:length(D)){
u=append(I_i(i,D,W[i,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
length(datos$Porcentaje)
I_todos=function(D,W){
u=c()
for(j in 1:length(D)){
u=append(I_i(j,D,W[j,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
Adyacencia[1,]
I_i(1,datos$Porcentaje,Adyacencia[1,])
I_i(2,datos$Porcentaje,Adyacencia[2,])
I_todos=function(D,W){
u=c()
for(j in 1:length(D)){
u=append(u,I_i(j,D,W[j,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
sum(I_todos())
sum(I_todos(datos$Porcentaje,Adyacencia))
I_de_Moran=sum(I_todos(datos$Porcentaje,Adyacencia))
datos=as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),ncol=2,nrow = 7,byrow = F))|>
setNames(c("Department","Porcentaje"))
datos$Porcentaje=as.numeric(datos$Porcentaje)
Adyacencia=matrix(c(0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0),ncol = 7,nrow=7,byrow = T)
Adyacencia=Adyacencia/rowSums(Adyacencia)
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/10.46)*sum((D-mean(D))*W)#Está mal la varianza pero sigamos
}
I_todos=function(D,W){
u=c()
for(j in 1:length(D)){
u=append(I_i(j,D,W[j,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
I_todos=function(D,W){
u=c()
for(j in 1:length(D)){
u=append(u,I_i(j,D,W[j,]))
}
return(u)
}
I_todos(datos$Porcentaje,Adyacencia)
I_de_Moran=sum(I_todos(datos$Porcentaje,Adyacencia))
I_s=I_todos(datos$Porcentaje,Adyacencia)
W>0
Adyacencia>0
Adyacencia>0*I_s
Adyacencia>0*I_s
I_s*Adyacencia>0
I_s*Adyacencia
Adyacencia_bool=Adyacencia |>
mutate_if(is.numeric, ~1 * (. > 0))
library(dplyr)
Adyacencia_bool=Adyacencia |>
mutate_if(is.numeric, ~1 * (. > 0))
library(dplyr)
Adyacencia_bool=Adyacencia |>
mutate_if(is.numeric, ~1 * (. > 0))
Adyacencia_bool=as.data.frame(Adyacencia) |>
mutate_if(is.numeric, ~1 * (. > 0))
Adyacencia_bool=as.data.frame(Adyacencia) |>
mutate_if(is.numeric, ~1 * (. > 0))|>
as.matrix()
I_s*Adyacencia_bool
Adyacencia_bool*I_s
Ady_repl=apply(Adyacencia_bool,MARGIN = 1,function(x)x*I_s)
View(Ady_repl)
I_s
Ady_repl=apply(Adyacencia_bool,MARGIN = 1,function(x)x*I_s)|>
t()
View(Ady_repl)
y=apply(Adyacencia_bool,MARGIN = 1,function(x)x*I_s)|>
t()|>
rowSums()
# Crear el gráfico
ggplot(df, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
library(ggplot2)
ggplot(df, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
ggplot(as.data.frame(I_s,y), aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
as.data.frame(I_s,y)
data=as.data.frame(matrix(c(I_s,y),nrow = 7,ncol=2,byrow = F))
View(data)
data=as.data.frame(matrix(c(I_s,y),nrow = 7,ncol=2,byrow = F))|>
setNames(c("I_s","y"))
ggplot(, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
ggplot(data, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
I_s
I_s
scale(I_s)
data=lapply(data,function(x) (x-mean(x))/sd(x))
ggplot(data, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
View(data)
data@I_s
data=as.data.frame(matrix(c(I_s,y),nrow = 7,ncol=2,byrow = F))|>
setNames(c("I_s","y"))
data=lapply(data,function(x) (x-mean(x))/sd(x))
data=melt(data)
library(tidyr)
data=melt(data)
library(reshape2)
data=melt(data)
ggplot(data, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
View(data)
data=as.data.frame(matrix(c(I_s,y),nrow = 7,ncol=2,byrow = F))|>
setNames(c("I_s","y"))
lapply(data,class)
data$I_s=(data$I_s-mean(data$I_s))/sd(data$I_s)
data$y=(data$y-mean(data$y))/sd(data$y)
ggplot(data, aes(x = I_s, y = y)) +
geom_point() +                                # Graficar los puntos
geom_vline(xintercept = 0, linetype = "dashed") +  # Línea vertical en x = 0
geom_hline(yintercept = 0, linetype = "dashed") +  # Línea horizontal en y = 0
geom_smooth(method = "lm", color = "blue") +  # Agregar la regresión lineal
theme_minimal()
View(data)
scatter.smooth(data)
install.packages("spdep")
library(spdep)
spdep::moran.plot(x=datos$Porcentaje,y=y)
spdep::moran.plot(x=datos$Porcentaje,y=y,listw = W)
spdep::moran.plot(x=datos$Porcentaje,y=y,listw = Adyacencia)
spdep::moran.plot(x=datos$Porcentaje,y=y,listw = nb2listw(Adyacencia))
I_s
W
lw <- mat2listw(Adyacencia, style = "W")
# Graficar el Moran Plot
moran.plot(I_s, listw = lw, main = "Moran's I Plot")
datos <- as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),
ncol=2, nrow=7, byrow=FALSE))
colnames(datos) <- c("Region", "Variable")
# Convertir la columna 'Variable' a numérica
datos$Variable <- as.numeric(as.character(datos$Variable))
# Crear la matriz de adyacencia
Adyacencia <- matrix(c(0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0),
ncol = 7, nrow = 7, byrow = TRUE)
# Crear la lista de pesos espaciales a partir de la matriz de adyacencia
lw <- mat2listw(Adyacencia, style = "W")
# Calcular los valores de Moran's I
moran_values <- moran.test(datos$Variable, lw)
# Mostrar los resultados
print(moran_values)
# Graficar el Moran Plot
moran.plot(datos$Variable, listw = lw, main = "Moran's I Plot")
moran_values
View(moran_values)
local_moran_values <- localmoran(datos$Variable, lw)
# Ver los valores de I_s de Moran
local_moran_values[, "Ii"]
x_standardized <- scale(datos$Variable, center = TRUE, scale = TRUE)
# Paso 2: Calcular los valores espacialmente lagged (Eje Y)
lagged_values <- lag.listw(lw, datos$Variable)
# Paso 3: Estandarizar los valores espacialmente lagged (Eje Y estandarizado)
y_standardized <- scale(lagged_values, center = TRUE, scale = TRUE)
x_standardized
y_standardized
lagged_values
View(datos)
datos$Variable
View(datos)
scatter(x_standardized,y_standardized)
plot(x_standardized,y_standardized)
datos=as.data.frame(matrix(data=c("A","B","C","D","E","F","G",
98.92,95.36,96.35,97.26,98.21,98.33,96.15),ncol=2,nrow = 7,byrow = F))|>
setNames(c("Department","Porcentaje"))
datos$Porcentaje=as.numeric(datos$Porcentaje)
Adyacencia=matrix(c(0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0),ncol = 7,nrow=7,byrow = T)
Adyacencia=Adyacencia/rowSums(Adyacencia)
I_i=function(i,D,W){
#D matriz de datos
#W matriz de adyacencia
((D[i]-mean(D))/10.46)*sum((D-mean(D))*W)#Está mal la varianza pero sigamos
}
I_todos=function(D,W){
u=c()
for(j in 1:length(D)){
u=append(u,I_i(j,D,W[j,]))
}
return(u)
}
I_de_Moran=sum(I_todos(datos$Porcentaje,Adyacencia))
I_s=I_todos(datos$Porcentaje,Adyacencia)
# Crear la lista de pesos espaciales a partir de la matriz de adyacencia
lw <- mat2listw(Adyacencia, style = "W")
library(spdep)
# Crear la lista de pesos espaciales a partir de la matriz de adyacencia
lw <- mat2listw(Adyacencia, style = "W")
View(lw)
# Calcular los valores de Moran's I
moran_values <- moran.test(datos$Variable, lw)
View(datos)
datos$Variable
# Calcular los valores de Moran's I
moran_values <- moran.test(datos$Porcentaje, lw)
moran_values
local_moran_values <- localmoran(datos$Porcentaje, lw)
# Ver los valores de I_s de Moran
local_moran_values[, "Ii"]
# Graficar el Moran Plot
moran.plot(datos$Porcentaje, listw = lw, main = "Moran's I Plot")
x_standardized <- scale(datos$Variable, center = TRUE, scale = TRUE)
x_standardized <- scale(datos$Porcentaje, center = TRUE, scale = TRUE)
mean(x_standardized)
sd(x_standardized)
library(raster)
#install.packages("gdistance")
library(gdistance)
library(sf)
#####previo.
#uso de suelo, shp a raster
#tenía un raster de uso de suelo con valores que dependían de otra cosa.
#Considerando una impedancia dada (presentación), se redefine
library(sf)
#####previo.
#uso de suelo, shp a raster
#tenía un raster de uso de suelo con valores que dependían de otra cosa.
#Considerando una impedancia dada (presentación), se redefine
uso_de_suelo_shp=read_sf("rasters/Acessibilidad/usyv_conservacion/usyv_conservacion.shp")
impedancia=c(0.7,0,0.7,0.95,0.95,0.6,0.65,0.75,0.95,0.8,0.6,0.1,0.8,0.6,0.6,0.7,0.6,0.75,0.7)
setwd("Accesibilidad")
setwd("Github/Gob/Accesibilidad")
uso_de_suelo=raster("Documentacion/Inputs/uso_de_suelo_friccion.tif")
pendiente=raster("Documentacion/Inputs/pendiente_200.tif")
carreteras=raster("Documentacion/Inputs/carreteras.tif")
pendiente=raster("Documentacion/Inputs/pendiente.tif")
####Accesibilidad a pie
slp_walk = 6 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.05))  # Calcula la velocidad de caminata ajustada por la pendiente.
#plot(-90:90,6*exp(-0.4*abs(tan(-90:90*pi/180)))+0.05,'l',ylab='Velocidad km/h',main='Velocidad caminando en función de la pendiente',xlab='Grados')
terrain_walk_spd = uso_de_suelo * slp_walk       #Le quité el /5.0. Quiero pensar que es la velocidad de caminata según uso de suelo. El promedio es de 5.5 km/h         # Calcula la velocidad sobre el terreno ajustada por la pendiente y el uso de suelo.
##########Accesibilidad por carreteras
slp_car = 50 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.12))  # Calcula la velocidad sobre carreteras ajustada por la pendiente.
sloped_road_spd = carreteras * slp_car / 50.0 # Calcula la velocidad ajustada por pendiente para carreteras y la convierte en un raster.
merged_spd = merge(sloped_road_spd, terrain_walk_spd)     # Combina los rasters de velocidad de carreteras y terreno.
friction = 1.0 / (merged_spd * 1000 / 60.0 )
#plot(friction)
#install.packages("gdistance")
library(gdistance)
Trans = transition(friction, function(x) 1 / mean(x), 8)  # Crea una matriz de transición basada en la fricción.
T.GC = geoCorrection(Trans, type="c")
981999/53750
5078/269
7+6+49+120+62+20+5
36+730+2668+1213+310+121
alumnos_est=14358+1576+97242+324357+170660+146703
grupos_est=348+272+6165+16789+7465+4822
alumnos_est/grupos_est
5078/245
predio=read_sf("../../../rasters/predios3/predios3.shp")
View(predio)
predio3=predio[3,]
View(predio3)
tiempo_zona = accCost(T.GC, predio3)  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
tiempo_zona = accCost(T.GC, st_centroid(predio3))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
hidalgo=st_read("Documentacion/Inputs/hidalgo/LIM_MUNICIPALES.shp")
n=15
lugares_destino_ficticios=st_sample(hidalgo$geometry,n)
View(lugares_destino_ficticios)
predio3=st_transform(predio3,crs(hidalgo))
tiempo_zona = accCost(T.GC, st_centroid(predio3))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
tiempo_zona
tiempo_zona = accCost(T.GC, predio3)  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
View(predio3)
tiempo_zona = accCost(T.GC, st_centroid(predio3))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
st_centroid(predio3)
st_centroid(predio3)$geometry
tiempo_zona = accCost(T.GC, c(522712.7 ,2198957))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
plot(tiempo_zona)
tmap(tiempo_zona)
library(tmap)
tmap(tiempo_zona)
tmap::qtm(tiempo_zona)
pendiente
tiempo_zona
crs(tiempo_zona)
crs(tiempo_zona)=crs(hidalgo)
tiempo_zona
hidalgo
writeRaster(tiempo_zona,"../../../rasters/accesibilidad_predio_jaguey.tiff")
#
R=tiempo_zona*0
plot(R)
C=carreteras
C[C>0]=1
plot(C)
##
#Calculamos el vecino más cercano de r en C a través de T.GC
C_sp=as(C, "Spatial")
##
#Calculamos el vecino más cercano de r en C a través de T.GC
C_sp=as(carreteras, "Spatial")
carr=read_sf("../../../rasters/Acessibilidad/carreteras_bien/carreteras_bien.shp")
##
#Calculamos el vecino más cercano de r en C a través de T.GC
C_sp=as(carr, "Spatial")
gdistance::shortestPath(T.GC,origin = c(522712.7 ,2198957),goal = C_sp)
gdistance::shortestPath(T.GC,origin = as(c(522712.7 ,2198957),"Spatial"),goal = C_sp)
as(c(522712.7 ,2198957),"Spatial")
gdistance::shortestPath(T.GC,origin = as(as.data.frame(c(522712.7 ,2198957)),"Spatial"),goal = C_sp)
as(as.data.frame(c(522712.7 ,2198957)),"Spatial")
as(c(522712.7 ,2198957),"Point")
SpatialPointsDataFrame(c(522712.7 ,2198957))
SpatialPointsDataFrame(as.data.framme(c(522712.7 ,2198957)))
SpatialPointsDataFrame(as.data.frame(c(522712.7 ,2198957)))
as.data.frame(c(522712.7 ,2198957))
SpatialPointsDataFrame(t(as.data.frame(c(522712.7 ,2198957))))
SpatialPointsDataFrame(data=t(as.data.frame(c(522712.7 ,2198957))))
t(as.data.frame(c(522712.7 ,2198957))
)
SpatialPointsDataFrame(data=t(as.data.frame(c(522712.7 ,2198957))),coords =t(as.data.frame(c(522712.7 ,2198957))) )
89/1403
89/1403*100
89/8471
89/8471*100
70/89*100
